{"/home/travis/build/npmtest/node-npmtest-haxe/test.js":"/* istanbul instrument in package npmtest_haxe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-haxe/lib.npmtest_haxe.js":"/* istanbul instrument in package npmtest_haxe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_haxe = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_haxe = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-haxe/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-haxe && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_haxe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_haxe\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_haxe.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_haxe.rollup.js'] =\n            local.assetsDict['/assets.npmtest_haxe.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_haxe.__dirname + '/lib.npmtest_haxe.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-haxe/node_modules/haxe/index.js":"\nvar executable = require('./lib/executable');\nvar vars = require('./lib/vars');\n\nmodule.exports = {\n    haxe: executable( vars.haxe.path, vars.haxe.args ),\n    haxelib: executable( vars.haxelib.path, vars.haxelib.args )\n}\n\n","/home/travis/build/npmtest/node-npmtest-haxe/node_modules/haxe/lib/executable.js":"var spawn = require('child_process').spawn;\nvar env = require('./env');\n\n\n/**\n\tcreates a function that pipes arguments and process to an executable function\n**/\nvar cli = function( executable ) {\n\treturn function(){\n\t    args = process.argv.slice(2);\n\t    cp = executable.apply(null, args);\n\n\t    cp.stdout.pipe(process.stdout);\n\t    cp.stderr.pipe(process.stderr);\n\t    cp.on('exit', process.exit);\n\t    cp.on('error', function(err){\n\t        console.error(err);\n\t    });\n\n\t    process.on('SIGTERM', function() {\n\t      cp.kill('SIGTERM');\n\t      process.exit(1);\n\t    });\n\t}\n}\n\n/**\n    creates a function that calls cli command + argus\n    appends functions arguments to command\n*/\nvar executable = function(command, args) {\n    var exe = function() {\n        var _args = ( args || [] ).slice(0);\n        for( a in arguments ) {\n            _args.push( arguments[a] );\n        }\n\n        var cp = spawn( command, _args, {\n            env: env\n        });\n\n        return cp;\n    }\n\n    exe.cli = cli( exe );\n\n    return exe;\n}\n\nmodule.exports = executable;","/home/travis/build/npmtest/node-npmtest-haxe/node_modules/haxe/lib/env.js":"var vars = require('./vars');\nvar env = module.exports = {};\n\nfunction merge( base , obj ) {\n    for( k in obj ) {\n        base[k] = obj[k];\n    }\n}\n\nmerge( env, process.env );\nmerge( env, vars.env );\n\n","/home/travis/build/npmtest/node-npmtest-haxe/node_modules/haxe/lib/vars.js":"var path = require('path');\nvar packagePath = require('./path');\n\nvar downloadsPath = packagePath('downloads');\nvar haxeDir = path.join(downloadsPath, 'haxe');\nvar haxelibDir = path.join(downloadsPath, 'haxelib');\n\nvar vars = module.exports = {\n    haxe : {\n        dir: haxeDir,\n        path: path.join(haxeDir, 'haxe')\n    },\n    haxelib : {\n        dir: haxelibDir,\n        path: path.join(haxeDir, 'haxe'),\n        args: [\n            '-cp', path.join(haxelibDir, 'src'),\n            '--run', 'tools.haxelib.Main'\n        ]\n    },\n    env : {\n        HAXELIB_PATH : packagePath('.haxelib'),\n        HAXE_STD_PATH : path.join(haxeDir, 'std')\n    }\n}","/home/travis/build/npmtest/node-npmtest-haxe/node_modules/haxe/lib/path.js":"var path = require('path');\n\nmodule.exports = function(p) {\n    return path.join(__dirname, '..', p);\n}","/home/travis/build/npmtest/node-npmtest-haxe/node_modules/haxe/install.js":"#!/usr/bin/env node\nvar os = require('os');\nvar Download = require('download');\nvar rmrf = require('rimraf');\nvar fs = require('fs');\nvar path = require('path');\nvar downloadStatus = require('download-status');\nvar packageConfig = require('./lib/package-config');\nvar haxeUrl = require('./lib/haxe-url');\nvar vars = require('./lib/vars');\n\n\n\nfunction findPackageJson() {\n\tvar startPath = process.cwd();\n\tvar ignore = 0;\n\n\tvar searchPath = path.join(startPath + '/..');\n\tvar fileFound = false;\n\tvar nextPath = '';\n\tvar numSearch = 0;\n\n\twhile (!fileFound) {\n\t\tsearchPath = nextPath || searchPath;\n\t\tnumSearch++;\n\t\tif(numSearch>4){\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tfs.statSync(path.join(searchPath + '/package.json'));\n\t\t\tif (ignore > 0) {\n\t\t\t\tignore--;\n\t\t\t} else {\n\t\t\t\tfileFound = true;\n\t\t\t}\n\t\t} catch (err) {}\n\n\t\tnextPath = path.join(searchPath + '/..');\n\t\tif (nextPath === path.normalize('/') || nextPath === '.' || nextPath === '..') {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (fileFound) {\n\t\treturn {\n\t\t\tread: function () {\n\t\t\t\treturn fs.readFileSync(path.join(searchPath + '/package.json'), 'utf8');\n\t\t\t},\n\t\t\tparse: function () {\n\t\t\t\treturn JSON.parse(fs.readFileSync(path.join(searchPath + '/package.json'), 'utf8'));\n\t\t\t},\n\t\t\tpath: path.join(searchPath + '/package.json')\n\t\t};\n\t}\n\n\treturn false;\n};\n\nvar haxeDir = vars.haxe.dir;\nvar haxelibDir = vars.haxelib.dir;\n\nvar haxeVersion = packageConfig('version');\ntry {\n\tvar pack = findPackageJson();\n\tif(pack != false) {\n\t\thaxeVersion = pack.parse().config.haxe;\n\t}\n} catch (error){\n\tconsole.warn('using default version');\n}\nif(haxeVersion == undefined){\n\thaxeVersion = packageConfig('version');\n}\n\nvar nightly = packageConfig('nightly');\nvar haxelibVersion = packageConfig('haxelib_version');\ntry {\n\thaxelibVersion = parent().parse().config.haxelib;\n} catch (error){\n\tconsole.warn('using default haxelib version');\n}\nif(haxelibVersion == undefined){\n\thaxelibVersion = packageConfig('haxelib_version');\n}\n\nvar platform = os.platform();\nvar arch = os.arch();\n\nvar isWin = platform.indexOf('win') == 0;\n\nfunction clean(cb) {\n\trmrf(haxeDir,function(err){\n\t\tif( err != null ) {\n\t\t\tcb( err );\n\t\t} else {\n\t\t\trmrf(haxelibDir, cb);\n\t\t}\n\t} );\n}\n\nfunction downloadHaxe( cb ) {\n\tconsole.log(\"Getting Haxe \" + haxeVersion + (nightly ? \" (nightly=\" + nightly + \")\" : \"\") );\n\tvar url = haxeUrl(platform, arch, haxeVersion, nightly);\n\tdownloadAndMoveTo( url , haxeDir, cb );\n}\n\nfunction downloadHaxelib( cb ) {\n\tconsole.log(\"Getting Haxelib \" + haxelibVersion );\n\tvar url = \"https://github.com/HaxeFoundation/haxelib/archive/\" + haxelibVersion + \".tar.gz\";\n\tdownloadAndMoveTo( url , haxelibDir, cb );\n}\n\nfunction downloadAndMoveTo( url, targetDir, cb ) {\n\tDownload({ extract: true, strip: 1 })\n\t\t.get( url )\n\t\t.dest( targetDir )\n\t\t.use(downloadStatus())\n\t\t.run( function(err,files){\n\t\t\tif( err ) {\n\t\t\t\tconsole.error(\"Unable to download or extract \" + url);\n\t\t\t\tcb(err);\n\t\t\t}\n\t\t\tcb();\n\t\t});\n}\n\nclean( function(err){\n\tif( err != null ) {\n\t\tthrow err;\n\t}\n\tdownloadHaxe(function(err){\n\t\tif( err != null ) {\n\t\t\tthrow err;\n\t\t}\n\n\t\tfs.chmodSync(path.join( haxeDir, 'haxe' + (isWin ? '.exe' : '')) , '755');\n\t\tdownloadHaxelib( function(err) {\n\t\t\tif( err != null ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t});\n\t});\n} );","/home/travis/build/npmtest/node-npmtest-haxe/node_modules/haxe/lib/package-config.js":"\nmodule.exports = function(key) {\n    return process.env[ 'npm_package_config_' + key ];\n}","/home/travis/build/npmtest/node-npmtest-haxe/node_modules/haxe/lib/haxe-url.js":"\nmodule.exports = function ( platform, arch, majorVersion, nightly ) {\n\n    var version = majorVersion;\n    var isNightly = !!nightly;\n\n    var url;\n    switch ( isNightly ) {\n        case true: \n            url = 'http://hxbuilds.s3-website-us-east-1.amazonaws.com/builds/haxe/';\n            switch( platform ) {\n                case 'linux':\n                    url += 'linux';\n                    switch( arch ) {\n                        case 'x64': \n                            url += '64';\n                            break;\n                        case 'ia32':\n                            url += '32';\n                            break;\n                    }\n                    break;\n                case 'darwin':\n                    url += 'mac';\n                    break;\n                case 'win32':\n                case 'win64':\n                    url += 'windows';\n                    break;\n            }\n            url += '/haxe_'+nightly+'.tar.gz';\n            break;\n        default: \n            url = 'http://haxe.org/website-content/downloads/' + version + '/downloads/haxe-' + version + '-';\n            switch ( platform ) {\n                case 'linux': \n                    url += 'linux';\n                    switch( arch ) {\n                        case 'x64': \n                            url += '64';\n                            break;\n                        case 'ia32':\n                            url += '32';\n                            break;\n                    }\n                    url += '.tar.gz';\n                    break;\n                case 'darwin':\n                    url += 'osx';\n                    url += '.tar.gz';\n                    break;\n                case 'win32':\n                case 'win64':\n                    url += 'win';\n                    url += '.zip';\n                    break;\n                default: \n                    console.error('Haxe is not compatible with your platform');\n                    throw 'error';\n            }\n    }\n    \n    return url;\n}"}